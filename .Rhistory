if(length(valid_cells)==0){stop('No shared cell between mutation and expression dataset')}
embeddings.use<-embeddings.use[valid_cells,]
#make attr vector
attr_vector<-mutation$col.attrs[[cell_attr]][]
names(attr_vector)<-mutation$col.attrs$cell_names[]
attr_vector<-attr_vector[valid_cells]
#check attr type
if(typeof(attr_vector) %in% c("double","integer")){vector_is_continuous=T}else{vector_is_continuous=F}
#plot
dataset<-as.data.frame(cbind(embeddings.use,attr_vector))
colnames(dataset)<-c('Dim1','Dim2','attr')
dataset$Dim1<-as.numeric(dataset$Dim1)
dataset$Dim2<-as.numeric(dataset$Dim2)
if(vector_is_continuous){
plot<-ggplot(data=dataset)+
geom_point(aes(Dim1, Dim2,colour=attr),alpha = 0.8, na.rm = T, size=1)+
ggtitle(cell_attr)+
scale_color_gradient(low="grey80",high = 'red')
}else{
dataset$attr<-as.factor(dataset$attr)
plot<-ggplot(data=dataset)+
geom_point(aes(Dim1, Dim2,colour=attr),alpha = 0.8, size=1)+
ggtitle(cell_attr)+
scale_colour_discrete(na.value = "grey80")
}
pdf('temp.pdf')
plot
dev.off()
mutation <- MutationRatio(mutation,'cell',range = which(mutation$row.attrs$cosmic[]!='NA'),range_name = 'cosmic')
cell_attr = 'mutation_ratio_cosmic'
#get reduction point
embeddings.use <- GetDimReduction(object = seurat, reduction.type = reduction,
slot = "cell.embeddings")[,1:2]
if (length(x = embeddings.use) == 0) {
stop(paste(reduction.use, "has not been run for this object yet."))
}
valid_cells<-intersect(mutation$col.attrs$cell_names[],seurat@cell.names)
if(length(valid_cells)==0){stop('No shared cell between mutation and expression dataset')}
embeddings.use<-embeddings.use[valid_cells,]
#make attr vector
attr_vector<-mutation$col.attrs[[cell_attr]][]
names(attr_vector)<-mutation$col.attrs$cell_names[]
attr_vector<-attr_vector[valid_cells]
#check attr type
if(typeof(attr_vector) %in% c("double","integer")){vector_is_continuous=T}else{vector_is_continuous=F}
#plot
dataset<-as.data.frame(cbind(embeddings.use,attr_vector))
colnames(dataset)<-c('Dim1','Dim2','attr')
dataset$Dim1<-as.numeric(dataset$Dim1)
dataset$Dim2<-as.numeric(dataset$Dim2)
if(vector_is_continuous){
plot<-ggplot(data=dataset)+
geom_point(aes(Dim1, Dim2,colour=attr),alpha = 0.8, na.rm = T, size=1)+
ggtitle(cell_attr)+
scale_color_gradient(low="grey80",high = 'red')
}else{
dataset$attr<-as.factor(dataset$attr)
plot<-ggplot(data=dataset)+
geom_point(aes(Dim1, Dim2,colour=attr),alpha = 0.8, size=1)+
ggtitle(cell_attr)+
scale_colour_discrete(na.value = "grey80")
}
pdf('temp.pdf')
plot
dev.off()
mutation$col.attrs$mutation_ratio_cosmic[]
table(mutation$col.attrs$mutation_ratio_cosmic[])
mutation <- MutationRatio(mutation,'cell',range = which(mutation$row.attrs$cosmic[]=='NA'),range_name = 'notcosmic')
table(mutation$col.attrs$mutation_ratio_notcosmic[])
mutation <- MutationRatio(mutation,'cell',range = which(mutation$row.attrs$cosmic[]=='NA'),range_name = 'cosmic',min_sites = 1,force_replace = T)
mutation <- MutationRatio(mutation,'cell',range = which(mutation$row.attrs$cosmic[]!='NA'),range_name = 'cosmic',min_sites = 1,force_replace = T)
PlotCellAttr(mutation,cell_attr = 'mutation_ratio_cosmic',seurat = pbmc)
#get reduction point
embeddings.use <- GetDimReduction(object = seurat, reduction.type = reduction,
slot = "cell.embeddings")[,1:2]
if (length(x = embeddings.use) == 0) {
stop(paste(reduction.use, "has not been run for this object yet."))
}
valid_cells<-intersect(mutation$col.attrs$cell_names[],seurat@cell.names)
if(length(valid_cells)==0){stop('No shared cell between mutation and expression dataset')}
embeddings.use<-embeddings.use[valid_cells,]
#make attr vector
attr_vector<-mutation$col.attrs[[cell_attr]][]
names(attr_vector)<-mutation$col.attrs$cell_names[]
attr_vector<-attr_vector[valid_cells]
#check attr type
if(typeof(attr_vector) %in% c("double","integer")){vector_is_continuous=T}else{vector_is_continuous=F}
#plot
dataset<-as.data.frame(cbind(embeddings.use,attr_vector))
colnames(dataset)<-c('Dim1','Dim2','attr')
dataset$Dim1<-as.numeric(dataset$Dim1)
dataset$Dim2<-as.numeric(dataset$Dim2)
if(vector_is_continuous){
plot<-ggplot(data=dataset)+
geom_point(aes(Dim1, Dim2,colour=attr),alpha = 0.8, na.rm = T, size=1)+
ggtitle(cell_attr)+
scale_color_gradient(low="grey80",high = 'red')
}else{
dataset$attr<-as.factor(dataset$attr)
plot<-ggplot(data=dataset)+
geom_point(aes(Dim1, Dim2,colour=attr),alpha = 0.8, size=1)+
ggtitle(cell_attr)+
scale_colour_discrete(na.value = "grey80")
}
pdf('temp.pdf')
plot
dev.off()
mutation <- MutationRatio(mutation,'cell',range = which(mutation$row.attrs$cosmic[]!='NA'),
range_name = 'cosmic',min_sites = 2,force_replace = T)
#get reduction point
embeddings.use <- GetDimReduction(object = seurat, reduction.type = reduction,
slot = "cell.embeddings")[,1:2]
if (length(x = embeddings.use) == 0) {
stop(paste(reduction.use, "has not been run for this object yet."))
}
valid_cells<-intersect(mutation$col.attrs$cell_names[],seurat@cell.names)
if(length(valid_cells)==0){stop('No shared cell between mutation and expression dataset')}
embeddings.use<-embeddings.use[valid_cells,]
#make attr vector
attr_vector<-mutation$col.attrs[[cell_attr]][]
names(attr_vector)<-mutation$col.attrs$cell_names[]
attr_vector<-attr_vector[valid_cells]
#check attr type
if(typeof(attr_vector) %in% c("double","integer")){vector_is_continuous=T}else{vector_is_continuous=F}
#plot
dataset<-as.data.frame(cbind(embeddings.use,attr_vector))
colnames(dataset)<-c('Dim1','Dim2','attr')
dataset$Dim1<-as.numeric(dataset$Dim1)
dataset$Dim2<-as.numeric(dataset$Dim2)
if(vector_is_continuous){
plot<-ggplot(data=dataset)+
geom_point(aes(Dim1, Dim2,colour=attr),alpha = 0.8, na.rm = T, size=1)+
ggtitle(cell_attr)+
scale_color_gradient(low="grey80",high = 'red')
}else{
dataset$attr<-as.factor(dataset$attr)
plot<-ggplot(data=dataset)+
geom_point(aes(Dim1, Dim2,colour=attr),alpha = 0.8, size=1)+
ggtitle(cell_attr)+
scale_colour_discrete(na.value = "grey80")
}
pdf('temp.pdf')
plot
dev.off()
embeddings.use <- GetDimReduction(object = seurat, reduction.type = reduction,
slot = "cell.embeddings")[,1:2]
if (length(x = embeddings.use) == 0) {
stop(paste(reduction.use, "has not been run for this object yet."))
}
valid_cells<-intersect(mutation$col.attrs$cell_names[],seurat@cell.names)
if(length(valid_cells)==0){stop('No shared cell between mutation and expression dataset')}
embeddings.use<-embeddings.use[valid_cells,]
#make attr vector
attr_vector<-mutation$col.attrs[[cell_attr]][]
names(attr_vector)<-mutation$col.attrs$cell_names[]
attr_vector<-attr_vector[valid_cells]
#check attr type
if(typeof(attr_vector) %in% c("double","integer")){vector_is_continuous=T}else{vector_is_continuous=F}
#plot
dataset<-as.data.frame(cbind(embeddings.use,attr_vector))
colnames(dataset)<-c('Dim1','Dim2','attr')
dataset$Dim1<-as.numeric(dataset$Dim1)
dataset$Dim2<-as.numeric(dataset$Dim2)
if(vector_is_continuous){
plot<-ggplot(data=dataset)+
geom_point(aes(Dim1, Dim2,colour=attr),alpha = 0.8, na.rm = T, size=1)+
ggtitle(cell_attr)+
scale_color_gradient(low="grey90",high = 'red')
}else{
dataset$attr<-as.factor(dataset$attr)
plot<-ggplot(data=dataset)+
geom_point(aes(Dim1, Dim2,colour=attr),alpha = 0.8, size=1)+
ggtitle(cell_attr)+
scale_colour_discrete(na.value = "grey90")
}
pdf('temp.pdf')
plot
dev.off()
embeddings.use <- GetDimReduction(object = seurat, reduction.type = reduction,
slot = "cell.embeddings")[,1:2]
if (length(x = embeddings.use) == 0) {
stop(paste(reduction.use, "has not been run for this object yet."))
}
valid_cells<-intersect(mutation$col.attrs$cell_names[],seurat@cell.names)
if(length(valid_cells)==0){stop('No shared cell between mutation and expression dataset')}
embeddings.use<-embeddings.use[valid_cells,]
#make attr vector
attr_vector<-mutation$col.attrs[[cell_attr]][]
names(attr_vector)<-mutation$col.attrs$cell_names[]
attr_vector<-attr_vector[valid_cells]
#check attr type
if(typeof(attr_vector) %in% c("double","integer")){vector_is_continuous=T}else{vector_is_continuous=F}
#plot
dataset<-as.data.frame(cbind(embeddings.use,attr_vector))
colnames(dataset)<-c('Dim1','Dim2','attr')
dataset$Dim1<-as.numeric(dataset$Dim1)
dataset$Dim2<-as.numeric(dataset$Dim2)
if(vector_is_continuous){
plot<-ggplot(data=dataset)+
geom_point(aes(Dim1, Dim2,colour=attr),alpha = 0.8, na.rm = T, size=1)+
ggtitle(cell_attr)+
scale_color_gradient(low="grey99",high = 'red')
}else{
dataset$attr<-as.factor(dataset$attr)
plot<-ggplot(data=dataset)+
geom_point(aes(Dim1, Dim2,colour=attr),alpha = 0.8, size=1)+
ggtitle(cell_attr)+
scale_colour_discrete(na.value = "grey99")
}
pdf('temp.pdf')
plot
dev.off()
embeddings.use <- GetDimReduction(object = seurat, reduction.type = reduction,
slot = "cell.embeddings")[,1:2]
if (length(x = embeddings.use) == 0) {
stop(paste(reduction.use, "has not been run for this object yet."))
}
valid_cells<-intersect(mutation$col.attrs$cell_names[],seurat@cell.names)
if(length(valid_cells)==0){stop('No shared cell between mutation and expression dataset')}
embeddings.use<-embeddings.use[valid_cells,]
#make attr vector
attr_vector<-mutation$col.attrs[[cell_attr]][]
names(attr_vector)<-mutation$col.attrs$cell_names[]
attr_vector<-attr_vector[valid_cells]
#check attr type
if(typeof(attr_vector) %in% c("double","integer")){vector_is_continuous=T}else{vector_is_continuous=F}
#plot
dataset<-as.data.frame(cbind(embeddings.use,attr_vector))
colnames(dataset)<-c('Dim1','Dim2','attr')
dataset$Dim1<-as.numeric(dataset$Dim1)
dataset$Dim2<-as.numeric(dataset$Dim2)
if(vector_is_continuous){
plot<-ggplot(data=dataset)+
geom_point(aes(Dim1, Dim2,colour=attr),alpha = 0.8, na.rm = T, size=1)+
ggtitle(cell_attr)+
scale_color_gradient(low="white",high = 'red')
}else{
dataset$attr<-as.factor(dataset$attr)
plot<-ggplot(data=dataset)+
geom_point(aes(Dim1, Dim2,colour=attr),alpha = 0.8, size=1)+
ggtitle(cell_attr)+
scale_colour_discrete(na.value = "white")
}
pdf('temp.pdf')
plot
dev.off()
if(vector_is_continuous){
plot<-ggplot(data=dataset)+
geom_point(aes(Dim1, Dim2,colour=attr),alpha = 0.8, na.rm = T, size=1)+
ggtitle(cell_attr)+
scale_color_gradient(low="white",high = 'green')
}else{
dataset$attr<-as.factor(dataset$attr)
plot<-ggplot(data=dataset)+
geom_point(aes(Dim1, Dim2,colour=attr),alpha = 0.8, size=1)+
ggtitle(cell_attr)+
scale_colour_discrete(na.value = "white")
}
pdf('temp.pdf')
plot
dev.off()
if(vector_is_continuous){
plot<-ggplot(data=dataset)+
geom_point(aes(Dim1, Dim2,colour=attr),alpha = 0.8, na.rm = T, size=1)+
ggtitle(cell_attr)+
scale_color_gradient(low="white",high = 'red',na.value = 'white')
}else{
dataset$attr<-as.factor(dataset$attr)
plot<-ggplot(data=dataset)+
geom_point(aes(Dim1, Dim2,colour=attr),alpha = 0.8, size=1)+
ggtitle(cell_attr)+
scale_colour_discrete(na.value = "white")
}
pdf('temp.pdf')
plot
dev.off()
if(vector_is_continuous){
plot<-ggplot(data=dataset)+
geom_point(aes(Dim1, Dim2,colour=attr),alpha = 0.8, na.rm = T, size=1)+
ggtitle(cell_attr)+
scale_color_gradient(low="grey",high = 'red',na.value = 'grey99')
}else{
dataset$attr<-as.factor(dataset$attr)
plot<-ggplot(data=dataset)+
geom_point(aes(Dim1, Dim2,colour=attr),alpha = 0.8, size=1)+
ggtitle(cell_attr)+
scale_colour_discrete(na.value = "white")
}
pdf('temp.pdf')
plot
dev.off()
if(vector_is_continuous){
plot<-ggplot(data=dataset)+
geom_point(aes(Dim1, Dim2,colour=attr),alpha = 0.8, na.rm = T, size=1)+
ggtitle(cell_attr)+
scale_color_gradient(low="grey",high = 'red',na.value = 'grey90')
}else{
dataset$attr<-as.factor(dataset$attr)
plot<-ggplot(data=dataset)+
geom_point(aes(Dim1, Dim2,colour=attr),alpha = 0.8, size=1)+
ggtitle(cell_attr)+
scale_colour_discrete(na.value = "white")
}
pdf('temp.pdf')
plot
dev.off()
}
any(is.na(c(1,3,NA)))
mutation<-connect('CTC_Q0_1000_nonsyn_mutation.loom')
mutation <- MutationRatio(mutation,'cell',range = which(mutation$row.attrs$cosmic[]!='NA'),
range_name = 'cosmic',min_sites = 2,force_replace = T)
mutation<-connect('CTC_Q0_1000_nonsyn_mutation.loom',mode='r+')
rm(mutation)
mutation<-connect('CTC_Q0_1000_nonsyn_mutation.loom',mode='r+')
mutation<-connect('CTC_Q0_1000_nonsyn_mutation.loom',mode='r+')
mutation<-connect('./CTC_Q0_1000_nonsyn_mutation.loom',mode='r+')
mutation<-connect('./CTC_Q0_1000_nonsyn_mutation.loom',mode='r+')
library(loomR)
library(loomR)
mutation<-connect('./CTC_Q0_1000_nonsyn_mutation.loom',mode='r+')
getwd()
setwd('..')
mutation<-connect('./CTC_Q0_1000_nonsyn_mutation.loom',mode='r+')
load("/data/jinwf/caow/Rworkspace/CTC_patient_mutation.RData")
mutation <- MutationRatio(mutation,'cell',range = which(mutation$row.attrs$cosmic[]!='NA'),
range_name = 'cosmic',min_sites = 2,force_replace = T)
library(SCtools)
mutation <- MutationRatio(mutation,'cell',range = which(mutation$row.attrs$cosmic[]!='NA'),
range_name = 'cosmic',min_sites = 2,force_replace = T)
PlotCellAttr(mutation,cell_attr = 'mutation_ratio_cosmic',seurat = pbmc)
pbmc<-RenameCells(pbmc, add.cell.id = 'Patient')
mutation <- MutationRatio(mutation,'cell',range = which(mutation$row.attrs$cosmic[]!='NA'),
range_name = 'cosmic',min_sites = 2,force_replace = T)
PlotCellAttr(mutation,cell_attr = 'mutation_ratio_cosmic',seurat = pbmc)
PlotCellAttr(mutation,cell_attr = 'mutation_ratio_cosmic',seurat = pbmc)
mutation$col.attrs$mutation_ratio_cosmic
library(SCtools, lib.loc = "/home/caow/R/x86_64-redhat-linux-gnu-library/3.5")
library(SCtools, lib.loc = "/home/caow/R/x86_64-redhat-linux-gnu-library/3.5")
mutation<-connect('./CTC_Q0_1000_nonsyn_mutation.loom',mode='r+')
mutation <- MutationRatio(mutation,'cell',range = which(mutation$row.attrs$cosmic[]!='NA'),
range_name = 'cosmic',min_sites = 2,force_replace = T)
PlotCellAttr(mutation,cell_attr = 'mutation_ratio_cosmic',seurat = pbmc)
mutation<-connect('./CTC_Q0_1000_nonsyn_mutation.loom',mode='r+')
library(SCtools, lib.loc = "/home/caow/R/x86_64-redhat-linux-gnu-library/3.5")
mutation <- MutationRatio(mutation,'cell',range = which(mutation$row.attrs$cosmic[]!='NA'),
range_name = 'cosmic',min_sites = 2,force_replace = T)
PlotCellAttr(mutation,cell_attr = 'mutation_ratio_cosmic',seurat = pbmc)
CEACAM %in% mutation$row.attrs$gene
CEACAM %in% mutation$row.attrs$gene[]
'CEACAM' %in% mutation$row.attrs$gene[]
intersect(c(CA9, CA12, CXorf61, DSG3, FAT2, GPR87, KISS1R, LYPD3, SLC7A11,TMPRSS4),mutation$row.attrs$gene[])
intersect(c('CA9', 'CA12', 'CXorf61', 'DSG3', 'FAT2', 'GPR87', 'KISS1R', 'LYPD3', 'SLC7A11','TMPRSS4'),mutation$row.attrs$gene[])
png('temp.png')
plot_gene_feature(c('CA9', 'CA12', 'CXorf61', 'DSG3', 'FAT2', 'GPR87', 'KISS1R', 'LYPD3', 'SLC7A11','TMPRSS4'),pbmc)
Sys.getenv()
load("/data/jinwf/caow/Rworkspace/raw_colon_all.RData")
load("/data/jinwf/caow/Rworkspace/raw_colon_all.RData")
pbmc->CTC
getwd()
setwd('..\')
setwd('..')
pdf('temp.pdf')
DimPlot(object = CTC, reduction.use = "umap", do.label=T,pt.size = 0.5)
dev.off()
load("/data/jinwf/caow/Rworkspace/raw_colon_all_raw.RData")
pdf('temp.pdf')
DimPlot(object = CTC, reduction.use = "umap", do.label=T,pt.size = 0.5)
dev.off()
pbmc->CTC
pdf('temp.pdf')
DimPlot(object = CTC, reduction.use = "umap", do.label=T,pt.size = 0.5)
dev.off()
ann_list<-read.csv('/home/caow/data/Rworkspace/ann_list.txt',sep="\t")
dim(ann_list)
rownames(ann_list)
ann_list[1:10,1:10]
colnames(ann_list）
colnames(ann_list)
colnames(ann_list)[5000]
CTC@cell.names
ann_list[which(ann_list$gene=='MAP4K3'),]->lll
View(lll)
lll<-t(lll)
View(lll)
apply(lll[-c(1:6),],2,function(x) length(which(is.na(x)))
)
apply(lll[-c(1:6),],2,function(x) length(which(!is.na(x))))
lll$21956
colnames(lll)
colnames(lll) %in% c(21956,21948)
which(colnames(lll) %in% c(21956,21948))
lll[,c(2,10)]->lll
pbmc@meta.data$mutation<-NA
pbmc@meta.data$mutation->mmm
names(mmm)<-pbmc@cell.names
lll[names(mmm),]
pbmc@meta.data$mutation <-lll[names(mmm),1]
pdf('temp.pdf')
DimPlot(object = CTC, reduction.use = "umap", do.label=T,pt.size = 0.5,group.by = 'mutation')
dev.off()
pbmc->CTC
pdf('temp.pdf')
DimPlot(object = CTC, reduction.use = "umap", do.label=T,pt.size = 0.5,group.by = 'mutation')
dev.off()
pbmc@meta.data$mutation <-lll[names(mmm),2]
pdf('temp.pdf')
DimPlot(object = CTC, reduction.use = "umap", do.label=T,pt.size = 0.5,group.by = 'mutation')
dev.off()
table(lll[names(mmm),2])
pbmc@meta.data$mutation <-as.factor(lll[names(mmm),2])
pdf('temp.pdf')
DimPlot(object = CTC, reduction.use = "umap", do.label=T,pt.size = 0.5,group.by = 'mutation')
dev.off()
rownames(lll)[which(lll[,2]=='ref')]
pbmc@meta.data$new_cluster
pdf('temp.pdf')
DimPlot(object = CTC, reduction.use = "umap", do.label=T,pt.size = 0.5,group.by = 'new_cluster')
dev.off()
pbmc@meta.data$new_cluster->kkk
names(kkk)<-pbmc@cell.names
intersect(rownames(lll)[which(lll[,2]=='ref')],names(kkk)[which(kkk=='cancer_cell')])->group_ref
intersect(rownames(lll)[which(lll[,2]=='alert')],names(kkk)[which(kkk=='cancer_cell')])->group_ref
intersect(rownames(lll)[which(lll[,2]=='ref')],names(kkk)[which(kkk=='cancer_cell')])->group_ref
intersect(rownames(lll)[which(lll[,2]=='alert')],names(kkk)[which(kkk=='cancer_cell')])->group_alert
intersect(group_alert,group_ref)
poss<-SubsetData(object=pbmc,cells.use=c(group_alert,group_ref))
pbmc@meta.data
poss@meta.data$res.1->nnn
names(nnn)<-poss@cell.names
nnn[group_alert]
nnn[group_alert]<-1
nnn[group_ref]<-0
poss@meta.data$res.1<-nnn
poss.markers <- FindAllMarkers(object = poss,only.pos = T,logfc.threshold = 0.5)
View(poss.markers)
View(poss)
poss@ident
poss@ident[group_alert]<-1
poss@ident->mmm
mmm
mmm[group_alert]
as.character(mmm)->nnn
nnn
names(mmm)
names(mmm)->names(nnn)
nnn[group_alert]<-1
nnn[group_ref]<-0
nnn
ccc<-as.factor(nnn)
ccc
ccc->poss@ident
poss.markers <- FindAllMarkers(object = poss,only.pos = T,logfc.threshold = 0.5)
View(poss.markers)
pbmc@meta.data$orig.ident
pbmc@meta.data$old.ident
table(pbmc@meta.data$old.ident)
setwd('..')
library(SCtools, lib.loc = "/home/caow/R/x86_64-redhat-linux-gnu-library/3.5")
library(SCtools, lib.loc = "/home/caow/R/x86_64-redhat-linux-gnu-library/3.5")
setwd('..')
mutation<-loomR::connect(CTC_Q0_1000_nonsyn_mutation.loom,mode='r+')
mutation<-loomR::connect(CRC_Q0_1000_nonsyn_mutation.loom,mode='r+')
mutation<-loomR::connect('CRC_Q0_1000_nonsyn_mutation.loom',mode='r+')
mutation <- GeneMutation(mutation,'/home/caow/data/Rworkspace/gencode_v30_gen_pos.coding.txt')
mutation <- GeneMutation(mutation,'/home/caow/data/Rworkspace/gencode_v30_gen_pos.coding.txt',force_replace = T)
mutation$row.attrs$gene[]
lll<-FetchSite(mutation,'gene',function(x){x %in% c('MUC3A','NDUFB1')})
mutation$row.attrs$gene[50]
mutation$row.attrs$gene[241]
mutation$row.attrs$gene[423]
mutation$row.attrs$gene[427]
mutation$row.attrs$gene[429]
SitesInGene(mutation,c('MUC3A','NDUFB1'))
CellInCluster(mutation,'T_cell')
CellInCluster(mutation,'NK_cell')
1:10-c(3,4)
c(1:10)-c(3,4)
setdiff(c(1:10),c(3,4))
setdiff(c(3,4),c(1:10))
typeof(c(1,2,3,NA))
typeof(c(1,2,3))
typeof(NA)
typeof(c(NA,NA))
typeof(as.integer(c(1,2,3)))
typeof(as.integer(c(1,2,'dd')))
typeof(as.integer(c(1,2,'dd')))->ll
as.integer(c(1,2,'dd'))->ll
typeof(ll)
typeof(as.integer(c('dd','vv','rr')))
typeof(as.integer(c('dd','vv','rr')))->lll
as.integer(c('dd','vv','rr'))->lll
typeof(lll)
as.integer(c('dd','vv','rr'),na.rm=T)->lll
length(mutation$col.attrs[])
dim(mutation$matrix[,])[2]
aaa<-connect('../CTC_Q0_1000_nosyn_mutation.loom')
aaa<-loomR::connect('../CTC_Q0_1000_nosyn_mutation.loom')
library(loomR)
aaa<-loomR::connect('../CTC_Q0_1000_nosyn_mutation.loom')
aaa<-connect('../CTC_Q0_1000_nosyn_mutation.loom')
setwd(..)
setwd('..')
getwd()
setwd('Rworkspace')
getwd()
aaa<-connect('CTC_Q0_1000_nosyn_mutation.loom')
aaa<-connect('CTC_Q0_1000_nosyn_mutation.loom'，mode='r+')
aaa<-connect('CTC_Q0_1000_nosyn_mutation.loom',mode='r+')
library(SCtools, lib.loc = "/home/caow/R/x86_64-redhat-linux-gnu-library/3.5")
getwd
getwd()
git()
